---
description: 
globs: 
alwaysApply: true
---
# basic rules

これはプロジェクトを跨ぐ、基本的なルールを記す。

## priority
ルールの優先順位は `priority.mdc` を参照すること。

## コーディングルール

### ファイル操作
- ユーザーの明示的な許可なく、ファイルの作成、編集、削除を行わない
- ファイル操作が必要な場合は、必ずユーザーに確認を取る

### 早期リターンの原則
- 条件が満たされない場合は早期にリターンする
- その後のコードは条件が満たされている前提で書ける
- コードの可読性が向上する

例：
```python
# 悪い例
if condition:
    # 長大な処理
    ...
    return result

# 良い例
if not condition:
    return default_result

# 条件が満たされている前提で処理を書ける
...
return result
```

### 数学的な不等式の表記
- 小さい値（左） < 大きい値（右）
- 時間軸やグラフの座標軸と同様の考え方
- 左辺に定数、右辺に変数を置く

例：
```python
# 悪い例
if len(data) >= WINDOW_SIZE:
    ...

# 良い例
if WINDOW_SIZE <= len(data):
    ...
```

### インデント
基本的にインデントはハードタブで4桁にする。
- マークダウンファイルはマークダウンの仕様に合わせてスペース2個にする。
- 文章(ソースコードのコメント内含む)では英語は半角で、日本語との間にはスペースを一つ入れる。
- 英数字は半角で記述する。
- 日本語と英数字(半角)の間はスペース1個入れる。

### 代入演算子の位置
代入演算子（=）は前後の変数名に合わせて位置を揃える
- 例：
```c
int     value1    = 10;
char    name[]    = "test";
float   distance  = 1.5f;

a           = b ;
unsigned_a  = 12 ;
```

### 変数宣言
- 変数宣言は1行に1つの変数とする。
- 変数の型と変数名の間にはタブを使いスペースをあける。
- 複数行で変数宣言が行われる場合は、可能な限り変数名の桁位置を合わせる。

例
```c
int             v1 ;
unsigned int    v2
```

### スペースの使用
- 行末のセミコロン（;）の前（左側）にはスペースを1つ入れる
- カッコ開き（(, {, [）の後ろ（右側）にはスペースを1つ入れる
- カッコ閉じ（), }, ]）の前（左側）にはスペースを1つ入れる
- 連続するカッコの間にはスペースを入れない

例：
```c
if( condition ) {
    do_something() ;
}

while( true ) {
    process_data() ;
}

void function() {
    int value = 0 ;
}

int array[ 10 ] = { 1, 2, 3 } ;
```

### ステートメントの記述規則
- returnステートメントは関数ライクに記述する
- 例：
```c
return( value ) ;
return( true ) ;
return( false ) ;
```

- 複雑な式を返す場合は、式全体をカッコで囲む
- 例：
```c
return( (a + b) * c ) ;
return( function_call( param1, param2 ) ) ;
```
```

### 命名規則
- ファイル名: 小文字、アンダースコア区切り
- 関数名: 小文字、アンダースコア区切り
- クラス名: パスカルケース
- 定数: 大文字、アンダースコア区切り

### ドキュメント生成
- Doxygenを使用してドキュメントを生成する
- 以下の要素には必ずDoxygenコメントを付ける：
  - クラス定義
  - パブリック関数
  - グローバル変数
  - 列挙型
  - マクロ定義

例：
```c
/**
 * @brief クラスの説明
 * @details 詳細な説明をここに記述
 */
class MyClass {
public:
    /**
     * @brief 関数の説明
     * @param param1 パラメータ1の説明
     * @param param2 パラメータ2の説明
     * @return 戻り値の説明
     */
    int myFunction(int param1, float param2);

    /**
     * @brief メンバ変数の説明
     */
    int memberVariable;
};

/**
 * @brief 列挙型の説明
 */
enum MyEnum {
    VALUE1,  ///< 値1の説明
    VALUE2   ///< 値2の説明
};
```

このルールは、コードの文書化を標準化し、メンテナンス性を向上させる効果があります。必要に応じて、Doxygenの具体的な設定や追加のルールも含めることができます。
### コメント
- 関数の説明は必須
- 複雑なロジックには適切なコメントを付ける
